Compare o1 knapsack problem with all-pair shotest path problem

TODO: range minimum query

use stack for DFS in graph
	https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-2/
	
	
http://www.programcreek.com/2014/04/leetcode-palindrome-partitioning-ii-java/
	
	Most of one-dimensional DP, we are keep the a local value for a subproblem. When subproblem grows, we have the 
	local value or global value for next big problem. Here we actively see the optimal value for f(i) from sub problem
	most likely f(i-1).
	
	But the minimum cut for palindrome partition is different in that
		When we detect a palindrome String[j...i], we update the the minimum cut for f(i). So we are update solution for 
		big problem when sub problem is tackled. 
		We don't know whether we have optimal solution until all cases are tackled.
		
		
	Edit distance:
		The last case(i, j) has several possible sub case instead of one. 
		
		
	 
		
	


review: 
	http://www.programcreek.com/2014/06/leetcode-trapping-rain-water-java/
	http://www.programcreek.com/2014/05/leetcode-add-and-search-word-data-structure-design-java/
	contains duplicate III: http://www.programcreek.com/2014/06/leetcode-contains-duplicate-iii-java/
	iterative post order tree traversal
	build binary heap
	array containing duplicates: http://www.programcreek.com/2014/06/leetcode-contains-duplicate-iii-java/
	majority elements: http://www.programcreek.com/2014/02/leetcode-majority-element-java/
	zero matrix: http://www.programcreek.com/2012/12/leetcode-set-matrix-zeroes-java/
	  http://www.programcreek.com/2014/03/leetcode-maximum-gap-java/
    http://www.programcreek.com/2014/06/leetcode-sort-colors-java/
    	http://www.programcreek.com/2014/04/leetcode-palindrome-partitioning-ii-java/

issue:
	http://www.programcreek.com/2014/06/leetcode-trapping-rain-water-java/
	http://www.programcreek.com/2014/03/leetcode-candy-java/
    http://www.programcreek.com/2013/01/leetcode-convert-sorted-list-to-binary-search-tree-java/
  
    
How apply BFS to this problem: http://community.topcoder.com/tc?module=Static&d1=match_editorials&d2=srm219


Travel Saleman problem.
